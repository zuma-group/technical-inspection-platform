generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enums for type safety
enum EquipmentType {
  BOOM_LIFT
  SCISSOR_LIFT
  TELEHANDLER
  FORKLIFT
  OTHER
}

enum EquipmentStatus {
  OPERATIONAL
  MAINTENANCE
  OUT_OF_SERVICE
}

enum InspectionStatus {
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum CheckpointStatus {
  PASS
  CORRECTED
  ACTION_REQUIRED
  NOT_APPLICABLE
}

enum UserRole {
  TECHNICIAN
  SUPERVISOR
  ADMIN
}

model Equipment {
  id           String       @id @default(cuid())
  type         EquipmentType
  model        String
  serial       String       @unique
  location     String
  hoursUsed    Int          @default(0)
  taskId       String?
  status       EquipmentStatus @default(OPERATIONAL)
  inspections  Inspection[]
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt

  @@index([status])
  @@index([type])
  @@index([taskId])
}

model Inspection {
  id           String       @id @default(cuid())
  equipmentId  String
  equipment    Equipment    @relation(fields: [equipmentId], references: [id])
  technicianId String
  technician   User         @relation(fields: [technicianId], references: [id])
  status       InspectionStatus @default(IN_PROGRESS)
  sections     Section[]
  templateId   String?
  taskId       String?
  serialNumber String?
  freightId    String?
  startedAt    DateTime     @default(now())
  completedAt  DateTime?
  updatedAt    DateTime     @updatedAt

  @@index([equipmentId])
  @@index([status])
  @@index([startedAt])
  @@index([taskId])
}

model Section {
  id           String       @id @default(cuid())
  inspectionId String
  inspection   Inspection   @relation(fields: [inspectionId], references: [id], onDelete: Cascade)
  name         String
  code         String
  order        Int
  checkpoints  Checkpoint[]
}

model Checkpoint {
  id             String   @id @default(cuid())
  sectionId      String
  section        Section  @relation(fields: [sectionId], references: [id], onDelete: Cascade)
  name           String
  critical       Boolean  @default(false)
  status         CheckpointStatus?
  notes          String?  @db.Text
  estimatedHours Float?
  order          Int
  media          Media[]
  updatedAt      DateTime @updatedAt
}

model User {
  id          String       @id @default(cuid())
  email       String       @unique
  name        String
  password    String?      // For NextAuth
  role        UserRole     @default(TECHNICIAN)
  inspections Inspection[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  @@index([email])
}

model Media {
  id           String     @id @default(cuid())
  checkpointId String
  checkpoint   Checkpoint @relation(fields: [checkpointId], references: [id], onDelete: Cascade)
  type         String     // 'photo' or 'video'
  data         String?    @db.Text // Base64 encoded file data (photos); videos may be stored in S3
  filename     String
  mimeType     String
  size         Int        // File size in bytes
  storage      String     @default("DB") // "DB" or "S3"
  url          String?
  s3Key        String?
  createdAt    DateTime   @default(now())
}

// Template models for managing inspection templates
model InspectionTemplate {
  id              String                @id @default(cuid())
  name            String
  description     String?               @db.Text
  equipmentType   EquipmentType
  isDefault       Boolean               @default(false)
  requiresFreightId Boolean             @default(false)
  parentTemplateId String?
  parentTemplate  InspectionTemplate?   @relation("TemplateHierarchy", fields: [parentTemplateId], references: [id])
  childTemplates  InspectionTemplate[]  @relation("TemplateHierarchy")
  sections        TemplateSection[]
  createdAt       DateTime              @default(now())
  updatedAt       DateTime              @updatedAt

  @@index([equipmentType])
  @@index([isDefault])
}

model TemplateSection {
  id          String                @id @default(cuid())
  templateId  String
  template    InspectionTemplate    @relation(fields: [templateId], references: [id], onDelete: Cascade)
  name        String
  order       Int
  checkpoints TemplateCheckpoint[]
}

model TemplateCheckpoint {
  id        String           @id @default(cuid())
  sectionId String
  section   TemplateSection  @relation(fields: [sectionId], references: [id], onDelete: Cascade)
  name      String
  critical  Boolean          @default(false)
  order     Int
}